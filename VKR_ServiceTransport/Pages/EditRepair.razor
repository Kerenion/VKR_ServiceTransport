@page "/editRepair"

@using Microsoft.EntityFrameworkCore
@using VKR_ServiceTransport.Domain.Entities
@using VKR_ServiceTransport.Ef.Persistance
@using VKR_ServiceTransport.Data

@inject IDbContextFactory<VKR_ServiceTransportContext> ContextFactory
@inject NavigationManager Navigation
@inject TransportService transportService

<PageTitle>Добавление ТО</PageTitle>

<style>

    .text-field__input {
        display: block;
        width: 100%;
        height: 30px;
        padding: 0.175rem 0.75rem;
        font-family: inherit;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #bdbdbd;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .text-field__input::placeholder {
            color: #212529;
            opacity: 0.4;
        }

        .text-field__input:focus {
            color: #212529;
            background-color: #fff;
            border-color: #bdbdbd;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);
        }

</style>

<style>

    .input-repair {
        display: grid;
    }

    input {
        margin: 5px 0px 20px;
    }

    select {
        margin: 5px 5px 20px 0px;
    }

    .WhatWasDone {
        display: flex;
    }

    .btn {
        padding: 1px 6px;
        font-size: 14px;
    }

</style>

<b>Редактирование ТО</b>

<div class="input-repair">

    <div>Что было сделано</div>
    <input disabled = "true" class="text-field__input" type="text" @bind="WhatWasDone" placeholder="Что было сделано" required>

    <div>Стоимость запчасти</div>
    <input class="text-field__input" type="text" @bind="CostSparePart" placeholder="Стоимость запчасти" required>

    <div>Стоимость работы</div>
    <input class="text-field__input" type="text" @bind="CostWork" placeholder="Стоимость работы" required>

    <div>Артикулы деталей</div>
    <input class="text-field__input" type="text" @bind="PartNumbers" placeholder="Артикулы деталей" required>

    <div>Комментарий</div>
    <input class="text-field__input" type="text" @bind="Comment" placeholder="Комментарий" required>

</div>

<button class="btn btn-primary" @onclick="buttonClick">Сохранить</button>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3" role="alert">@errorMessage</div>
}

@code {
    string WhatWasDone;

    decimal CostSparePart;
    decimal CostWork;

    int PartNumbers;
    string Comment;

    Repair repair;

    private string errorMessage;

    List<SparePartsIntervals> sparePartsIntervals;

    protected async override Task OnInitializedAsync()
    {
        await using var context = ContextFactory.CreateDbContext();

        repair = transportService.Repair;

        WhatWasDone = repair.WhatWasDone;
        CostSparePart = repair.CostSparePart;
        CostWork = repair.CostWork;
        PartNumbers = repair.PartNumbers;
        Comment = repair.Comment;
    }

    public bool DataChecking()
    {
        if (CostSparePart < 0 || CostWork < 0)
        {
            errorMessage = "Стоимость запчасти и Стоимость работы должны быть неотрицательными";
            return true;
        }

        if (string.IsNullOrWhiteSpace(Comment))
        {
            errorMessage = "Добавте комментарий";
            return true;
        }

        return false;
    }

    public async Task buttonClick()
    {
        await using var context = ContextFactory.CreateDbContext();

        if (DataChecking())
            return;

        repair.CostSparePart = CostSparePart;
        repair.CostWork = CostWork;
        repair.CostTotal = CostSparePart + CostWork;
        repair.PartNumbers = PartNumbers;
        repair.Comment = Comment;

        context.Repairs.Update(repair);

        await context.SaveChangesAsync();
        Navigation.NavigateTo("/counter", true);
    }
}

@page "/"

@using Microsoft.EntityFrameworkCore
@using VKR_ServiceTransport.Domain.Entities
@using VKR_ServiceTransport.Ef.Persistance
@using VKR_ServiceTransport.Data
@using System.Net.Http.Json;

@inject IDbContextFactory<VKR_ServiceTransportContext> ContextFactory
@inject NavigationManager Navigation
@inject TransportService transportService
@inject IJSRuntime JSRuntime

<PageTitle>Список ТС</PageTitle>

<style>
    .table {
        width: 100%;
        border: none;
        margin-bottom: 20px;
        border-collapse: separate;
        border-radius: 20px;
        box-shadow: 0px 0px 40px 0px #a3a3a3ff;
    }

        .table thead th {
            font-weight: bold;
            text-align: left;
            border: none;
            padding: 10px 15px;
            background: #EDEDED;
            font-size: 14px;
            border-top: 1px solid #ddd;
        }

        .table tr th:first-child, .table tr td:first-child {
            border-left: 1px solid #ddd;
        }

        .table tr th:last-child, .table tr td:last-child {
            border-right: 1px solid #ddd;
        }

        .table thead tr th:first-child {
            border-radius: 20px 0 0 0;
        }

        .table thead tr th:last-child {
            border-radius: 0 20px 0 0;
        }

        .table tbody td {
            text-align: left;
            border: none;
            padding: 10px 15px;
            font-size: 14px;
            vertical-align: top;
        }

        .table tbody tr:nth-child(even) {
            background: #F8F8F8;
        }

        .table tbody tr:last-child td {
            border-bottom: 1px solid #ddd;
        }

            .table tbody tr:last-child td:first-child {
                border-radius: 0 0 0 20px;
            }

            .table tbody tr:last-child td:last-child {
                border-radius: 0 0 20px 0;
            }
</style>

<style>

    .text-field__input {
        display: block;
        width: 110px;
        height: 30px;
        padding: 0.375rem 0.75rem;
        font-family: inherit;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #bdbdbd;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .text-field__input::placeholder {
            color: #212529;
            opacity: 0.4;
        }

        .text-field__input:focus {
            color: #212529;
            background-color: #fff;
            border-color: #bdbdbd;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);
        }

</style>

<style>
    .btn{
        padding: 1px 6px;
        font-size: 14px;
    }

    td {
        
        text-align: center;
        padding: .5rem .75rem;
    }

    td input{
        width: 100px;
    }

    .add-transport-button {
        position: absolute;
        bottom: 50px;
        right: 50px;
        color: #fff;
        background-color: #1b6ec2;
        border-color: #1861ac;
        display: inline-block;
        font-weight: 400;
        line-height: 1.5;
        text-align: center;
        text-decoration: none;
        vertical-align: middle;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
        border: 1px solid transparent;
        padding: .375rem .75rem;
        font-size: 1rem;
        border-radius: .25rem;
        transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }

    .tra {
        display:flex;
        justify-content: space-between;
    }

    .transport{
        background-color: #f7f5f5;
        box-shadow: 0px 0px 40px 0px #a3a3a3ff;
        width:300px;
        height:300px;
        margin-right: 25px;
        border-radius: 20px;
    }

    .car-image img{
        width: 390px;
        height: 250px;
        max-width: 100%;
        object-fit: cover;
        border-radius: 20px 20px 0px 0px;
    }
    
    .current{
        font-weight: bold;
        
        margin: 10px;
    }

    .car-title{
        margin: 10px;
    }

    .car-characteristic{
        margin: 10px;
    }

    .panel-tr{
        margin: 10px;
    }

    .container-1{
        width: 600px;
    }

    .input-miliage{
        display:flex;
    }

    .input-miliage div{
        padding-right: 10px;
    }

    .transport-nav{
        padding-top: 10px;
    }

</style>


<div class="tra">

    <div class="transports">

        <div class="container-1">

            <table class="table">
                <thead>
                    <tr class="table-transport">
                        <th>Марка</th>
                        <th>Модель</th>
                        <th>Гос. номер</th>
                        <th>Пробег</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>

                <tbody>

                    <tr>
                        <td><input class="text-field__input" type="text" @bind="Brand" placeholder="Марка" required /></td>
                        <td><input class="text-field__input" type="text" @bind="Model" placeholder="Модель" required /></td>
                        <td><input class="text-field__input" type="text" @bind="Number" placeholder="Гос. Номер" required /></td>
                        <td></td>
                        <td><button class="btn btn-primary" @onclick="FilterTransport">Найти</button></td>
                        <td><button class="btn btn-primary" @onclick="CloseTransport">Сбросить</button></td>
                    </tr>

                    @foreach (var transport in select_transports.Skip(numberTransportsPerPage * transportService.currentPage).Take(numberTransportsPerPage))
                    {
                        <tr>
                            <td>@transport.Brand</td>
                            <td>@transport.Model</td>
                            <td>@transport.StateNumber</td>
                            <td>@transport.Mileage</td>
                            <td><button class="btn btn-primary" @onclick="() => WriteThisTransport(transport)">Редактировать</button></td>
                            <td><button class="btn btn-primary" @onclick="() => SelectThisTransport(transport)">Выбрать</button></td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

        <div>
            <button class="btn btn-primary" disabled="@(!(transportService.currentPage > 0))" @onclick="PrevPage">Пред</button>

            <button class="btn btn-primary" disabled="@(!(transportService.currentPage < maxCountPages))" @onclick="NextPage">След</button>
        </div>

    </div>
    
    <div class="transport">
        @* <div class="car-image">
            <img src="/s.jpg">
        </div> *@

        <div class="current">
            Текущий транспорт
        </div>

        <div class="car-title">
            Марка: @transportService.currentTransport.Brand
            <br />
            Модель: @transportService.currentTransport.Model
        </div>

        <div class="car-characteristic">
            Пробег: @transportService.currentTransport.Mileage
            <br />
            Гос. номер: @transportService.currentTransport.StateNumber
            <br />
            VIN: @transportService.currentTransport.VIN
        </div>

        <div class="panel-tr">

            <div>Добавить суточный пробег</div>
            <div class="input-miliage">
                <div>
                    <input class="text-field__input" type="text" @bind="dailyMileage" placeholder="Cуточный пробег" required>
                </div>

                <button class="btn btn-primary" @onclick="AddDailyMileage">Добавить</button>
            </div>

            <div class="transport-nav">
    
                <button class="btn btn-primary" disabled="@(!(transportService.index - 1 > -1))" @onclick="PrevTransport">←</button>
            
                <button class="btn btn-primary" disabled="@(!(transportService.index + 1 < select_transports.Count))" @onclick="NextTransport">→</button>

            </div>

        </div>
    </div>
</div>

<button class=" add-transport-button" @onclick="AddTransport">Добавить</button>

@code{
    List<Transport> transports;
    List<Transport> select_transports;

    string Brand;
    string Model;
    string Number;

    int numberTransportsPerPage = 5;
    double maxCountPages;

    int dailyMileage;

    protected async override Task OnInitializedAsync()
    {
        await using var context = ContextFactory.CreateDbContext();

        transports = await context.Transports.Skip(0)
                                            .Include(x => x.Repairs)
                                            .Include(x => x.SparePartsIntervals)
                                            .Include(x => x.Notices)
                                            .ToListAsync();

        select_transports = transports;

        if (transportService.currentTransport == null)
        {
            transportService.currentTransport = transports.FirstOrDefault();
        }

        maxCountPages = Math.Ceiling((double)(select_transports.Count() / numberTransportsPerPage));
    }

    public void AddTransport()
    {
        Navigation.NavigateTo("addTransport", true);
    }

    private void WriteThisTransport(Transport transport)
    {
        transportService.transport = transport;
        Navigation.NavigateTo("thisTransport", true);
    }

    private void SelectThisTransport(Transport transport)
    {
        transportService.currentTransport = transport;
        transportService.index = transports.IndexOf(transport);
    }

    private void NextPage()
    {
        transportService.currentPage++;
    }

    private void PrevPage()
    {
        transportService.currentPage--;
    }

    public async Task AddDailyMileage()
    {
        if (dailyMileage <= 0)
        {
            dailyMileage = 0;
            return;
        }  

        await using var context = ContextFactory.CreateDbContext();
        transportService.currentTransport.Mileage += dailyMileage;

        context.Transports.Update(transportService.currentTransport);
        await context.SaveChangesAsync();
        dailyMileage = 0;
        StateHasChanged();
    }

    private void PrevTransport()
    {
        transportService.currentTransport = select_transports[transportService.index - 1];
        transportService.index--;
    }

    private void NextTransport()
    {
        transportService.currentTransport = select_transports[transportService.index + 1];
        transportService.index++;
    }

    private void FilterTransport()
    {
        transportService.currentPage = 0;
        select_transports = transports;

        if (!String.IsNullOrEmpty(Brand))
        {
            select_transports = select_transports.Where(x => x.Brand == Brand).ToList();
        }
        if (!String.IsNullOrEmpty(Model))
        {
            select_transports = select_transports.Where(x => x.Model == Model).ToList();
        }
        if (!String.IsNullOrEmpty(Number))
        {
            select_transports = select_transports.Where(x => x.StateNumber == Number).ToList();
        }

        maxCountPages = Math.Ceiling((double)(select_transports.Count() / numberTransportsPerPage));
    }
    private void CloseTransport()
    {
        select_transports = transports;
        maxCountPages = Math.Ceiling((double)(select_transports.Count() / numberTransportsPerPage));

        Brand = "";
        Model = "";
        Number = "";
    }
}

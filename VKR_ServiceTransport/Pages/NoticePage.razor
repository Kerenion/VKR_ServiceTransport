@page "/noticePage"

@using Microsoft.EntityFrameworkCore
@using VKR_ServiceTransport.Domain.Entities
@using VKR_ServiceTransport.Ef.Persistance
@using VKR_ServiceTransport.Data

@inject IDbContextFactory<VKR_ServiceTransportContext> ContextFactory
@inject TransportService transportService
@inject NavigationManager Navigation

<PageTitle>Уведомления</PageTitle>

<style>

    .table {
        width: 100%;
        border: none;
        margin-bottom: 20px;
        border-collapse: separate;
    }

        .table thead th {
            font-weight: bold;
            text-align: left;
            border: none;
            padding: 10px 15px;
            background: #EDEDED;
            font-size: 14px;
            border-top: 1px solid #ddd;
        }

        .table tr th:first-child, .table tr td:first-child {
            border-left: 1px solid #ddd;
        }

        .table tr th:last-child, .table tr td:last-child {
            border-right: 1px solid #ddd;
        }

        .table thead tr th:first-child {
            border-radius: 20px 0 0 0;
        }

        .table thead tr th:last-child {
            border-radius: 0 20px 0 0;
        }

        .table tbody td {
            text-align: left;
            border: none;
            padding: 10px 15px;
            font-size: 14px;
            vertical-align: top;
        }

        .table tbody tr:nth-child(even) {
            background: #F8F8F8;
        }

        .table tbody tr:last-child td {
            border-bottom: 1px solid #ddd;
        }

            .table tbody tr:last-child td:first-child {
                border-radius: 0 0 0 20px;
            }

            .table tbody tr:last-child td:last-child {
                border-radius: 0 0 20px 0;
            }

</style>

<style>

    .progress{
        width:200px;
    }

    .add-repairs-button {
        position: absolute;
        bottom: 50px;
        right: 50px;
        color: #fff;
        background-color: #1b6ec2;
        border-color: #1861ac;
        display: inline-block;
        font-weight: 400;
        line-height: 1.5;
        text-align: center;
        text-decoration: none;
        vertical-align: middle;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
        border: 1px solid transparent;
        padding: .375rem .75rem;
        font-size: 1rem;
        border-radius: .25rem;
        transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }
</style>



<b>Уведомления</b>



<table class="table">
    <thead>
        <tr>
            <th>Что было сделано</th>
            <th>Дата</th>
            <th>Дата, когда менять</th>
            <th>Нынешний пробег</th>
            <th>Пробег, когда надо менять</th>
            <th>Прогресс</th>
            <th></th>
        </tr>
    </thead>

    

    <tbody>
        @foreach (var notice in notices)
        {
            if (!ShouldHideNotice(notice) || showHiddenNotices)
            {
                <tr>
                    <td>@notice.Text</td>
                    <td>@notice.Date</td>
                    <td>@(notice.DateNotify == DateOnly.MinValue ? "-" : notice.DateNotify)</td>
                    <td>@transport.Mileage</td>
                    <td>@(notice.MileageNotify == 0 ? "-" : notice.MileageNotify.ToString())</td>

                    <td>

                        @if (notice.MileageNotify == 0)
                        {
                            @:-
                        }
                        else
                        {
                            <div class="progress">
                                <div class="progress-bar bg-success" role="progressbar" style="width: @(transport.Mileage * 100 / notice.MileageNotify)%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@(transport.Mileage * 100 / notice.MileageNotify) %</div>
                            </div>
                        }

                    </td>
                    <td>
                        @if (notice.DateNotify == DateOnly.MinValue)
                        {
                            @:-
                        }
                        else
                        {
                            @CalculateDaysDifferenceFromToday(notice.DateNotify)
                            ;
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<button class="add-repairs-button" @onclick="ToggleHiddenNotices">@($"{(showHiddenNotices ? "Скрыть" : "Показать")} скрытые уведомления")</button>

@code {
    Transport transport;
    List<Notice> notices;
    DateTime today = DateTime.Today;

    bool showHiddenNotices = false; 

    void ToggleHiddenNotices()
    {
        showHiddenNotices = !showHiddenNotices;
    }

    bool ShouldHideNotice(Notice notice)
    {
        var today = DateOnly.FromDateTime(DateTime.Now);
        return notice.DateNotify < today || ((notice.MileageNotify < transport.Mileage) && (notice.MileageNotify != 0));
    }


    protected async override Task OnInitializedAsync()
    {
        await using var context = ContextFactory.CreateDbContext();


        var today = DateOnly.FromDateTime(DateTime.Today);

        transport = transportService.currentTransport;
        notices = transport.Notices;

        notices = notices.OrderBy(notice => notice.DateNotify == DateOnly.MinValue ? DateTime.MaxValue : notice.DateNotify.ToDateTime(TimeOnly.MinValue))
            .ToList();

    }


    public string CalculateDaysDifferenceFromToday(DateOnly otherDate)
    {
        DateOnly today = DateOnly.FromDateTime(DateTime.Now);
        int todayDayNumber = today.DayNumber;
        int otherDayNumber = otherDate.DayNumber;
        return Convert.ToString( otherDayNumber - todayDayNumber) + " Дней осталось";
    }
}
